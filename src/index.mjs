// Generated by ReScript, PLEASE EDIT WITH CARE

import * as SMoL from "@brownplt/smol-translator/src/SMoL.mjs";
import * as React from "react";
import * as Core__List from "@rescript/core/src/Core__List.mjs";
import * as SExpression from "@brownplt/s-expression/src/SExpression.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.mjs";
import * as HighlightJs from "./highlight.js";
import * as Client from "react-dom/client";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";

import './index.css'
;

function highlight(prim) {
  HighlightJs.highlight(prim);
}

function toString(t) {
  switch (t) {
    case "Lispy" :
        return "Lispy";
    case "Python" :
        return "Python";
    case "JavaScript" :
        return "JavaScript";
    case "Scala" :
        return "Scala";
    case "PseudoCode" :
        return "PseudoCode";
    
  }
}

function fromString(s) {
  switch (s) {
    case "JavaScript" :
        return "JavaScript";
    case "PseudoCode" :
        return "PseudoCode";
    case "Python" :
        return "Python";
    case "Scala" :
        return "Scala";
    default:
      return "Lispy";
  }
}

var all = [
  "Lispy",
  "Python",
  "JavaScript",
  "Scala",
  "PseudoCode"
];

var Syntax = {
  toString: toString,
  fromString: fromString,
  all: all
};

function toString$1(ksl) {
  return SMoL.KindedSourceLocation.toString(ksl).replaceAll(":", "_");
}

function reactOfPrint(p, sourceMap) {
  var reactOfAnnotatedPrint = function (param) {
    var ann = param.ann;
    var it = param.it;
    var ann$1 = ann !== undefined ? (function (it) {
          var className = toString$1(ann);
          return React.createElement("span", {
                      className: className,
                      title: Core__Option.getOr(Core__Option.map(sourceMap.get(className), SExpression.SourceLocation.toString), ""),
                      onMouseEnter: (function ($$event) {
                          HighlightJs.highlight(className);
                          $$event.preventDefault();
                        })
                    }, it);
        }) : (function (it) {
          return it;
        });
    if (it.TAG === "Plain") {
      var s = it._0;
      if (s === "") {
        return React.createElement(React.Fragment, {});
      } else {
        return ann$1(s);
      }
    }
    var es = it._0;
    if (es) {
      return ann$1(Core__List.toArray(es).map(reactOfAnnotatedPrint));
    } else {
      return React.createElement(React.Fragment, {});
    }
  };
  return reactOfAnnotatedPrint(p);
}

function toString$2(t) {
  switch (t) {
    case "Output" :
        return "Output";
    case "Term" :
        return "Term";
    case "Program" :
        return "Program";
    
  }
}

function fromString$1(t) {
  switch (t) {
    case "Output" :
        return "Output";
    case "Term" :
        return "Term";
    default:
      return "Program";
  }
}

var all$1 = [
  "Output",
  "Term",
  "Program"
];

var Kind = {
  toString: toString$2,
  fromString: fromString$1,
  all: all$1
};

function Index$App(props) {
  var match = React.useState(function () {
        return "";
      });
  var setSource = match[1];
  var source = match[0];
  var match$1 = React.useState(function () {
        return "Program";
      });
  var setKind = match$1[1];
  var kind = match$1[0];
  var tr = function (kind, targetSyntax, source) {
    try {
      switch (kind) {
        case "Output" :
            switch (targetSyntax) {
              case "Lispy" :
                  return source;
              case "Python" :
                  return SMoL.PYTranslator.translateOutput(source);
              case "JavaScript" :
                  return SMoL.JSTranslator.translateOutput(source);
              case "Scala" :
                  return SMoL.SCTranslator.translateOutput(source);
              case "PseudoCode" :
                  return SMoL.PCTranslator.translateOutput(source);
              
            }
        case "Term" :
            switch (targetSyntax) {
              case "Lispy" :
                  return source;
              case "Python" :
                  return SMoL.PYTranslator.translateStandAloneTerm(source);
              case "JavaScript" :
                  return SMoL.JSTranslator.translateStandAloneTerm(source);
              case "Scala" :
                  return SMoL.SCTranslator.translateStandAloneTerm(source);
              case "PseudoCode" :
                  return SMoL.PCTranslator.translateStandAloneTerm(source);
              
            }
        case "Program" :
            switch (targetSyntax) {
              case "Lispy" :
                  return source;
              case "Python" :
                  var print = SMoL.PYTranslator.translateProgramFull(true, source).ann.print;
                  var sourceMap = SMoL.Print.toSourceMap(print, toString$1);
                  return reactOfPrint(print, sourceMap);
              case "JavaScript" :
                  var print$1 = SMoL.JSTranslator.translateProgramFull(true, source).ann.print;
                  var sourceMap$1 = SMoL.Print.toSourceMap(print$1, toString$1);
                  return reactOfPrint(print$1, sourceMap$1);
              case "Scala" :
                  var print$2 = SMoL.SCTranslator.translateProgramFull(true, source).ann.print;
                  var sourceMap$2 = SMoL.Print.toSourceMap(print$2, toString$1);
                  return reactOfPrint(print$2, sourceMap$2);
              case "PseudoCode" :
                  var print$3 = SMoL.PCTranslator.translateProgramFull(true, source).ann.print;
                  var sourceMap$3 = SMoL.Print.toSourceMap(print$3, toString$1);
                  return reactOfPrint(print$3, sourceMap$3);
              
            }
        
      }
    }
    catch (raw_err){
      var err = Caml_js_exceptions.internalToOCamlException(raw_err);
      if (err.RE_EXN_ID === SMoL.SMoLTranslateError) {
        return React.createElement("mark", undefined, SMoL.TranslateError.toString(err._1));
      }
      throw err;
    }
  };
  return React.createElement("main", undefined, React.createElement("section", undefined, React.createElement("h2", undefined, "Source ", React.createElement("select", {
                          onChange: (function (evt) {
                              var k = evt.currentTarget.value;
                              var k$1 = fromString$1(k);
                              setKind(function (param) {
                                    return k$1;
                                  });
                            })
                        }, all$1.map(function (k) {
                              var value = toString$2(k);
                              return React.createElement("option", {
                                          selected: k === kind,
                                          value: value
                                        }, value);
                            })), ":"), React.createElement("textarea", {
                      cols: 40,
                      name: "sourceProgram",
                      rows: 20,
                      value: source,
                      onChange: (function (evt) {
                          var x = evt.currentTarget.value;
                          setSource(function (param) {
                                return x;
                              });
                        })
                    })), React.createElement("section", {
                  id: "translations"
                }, React.createElement("h2", undefined, "Translated ", React.createElement("u", undefined, toString$2(kind))), React.createElement("div", undefined, all.map(function (syntax, i) {
                          var tmp;
                          var exit = 0;
                          var target;
                          try {
                            target = tr(kind, syntax, source);
                            exit = 1;
                          }
                          catch (raw_err){
                            var err = Caml_js_exceptions.internalToOCamlException(raw_err);
                            if (err.RE_EXN_ID === SMoL.SMoLPrintError) {
                              tmp = err._1;
                            } else {
                              throw err;
                            }
                          }
                          if (exit === 1) {
                            tmp = React.createElement("pre", undefined, target);
                          }
                          return React.createElement("article", {
                                      key: i.toString()
                                    }, React.createElement("h3", undefined, toString(syntax)), tmp);
                        }))));
}

var App = {
  make: Index$App
};

var rootElement = document.querySelector("#root");

if (!(rootElement == null)) {
  var root = Client.createRoot(rootElement);
  root.render(React.createElement(Index$App, {}));
}

export {
  highlight ,
  Syntax ,
  toString$1 as toString,
  reactOfPrint ,
  Kind ,
  App ,
}
/*  Not a pure module */
